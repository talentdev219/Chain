/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020-2022  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `chain-bench-012bd056`, CPU: `AMD EPYC 7B13`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/nodle-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=*
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --template=./.maintain/frame-weight-template.hbs
// --output=runtimes/eden/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight}};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_contracts`.
pub struct WeightInfo<T>(PhantomData<T>);
// Customize : pallet_contracts::weights::WeightInfo
impl<T: frame_system::Config> pallet_contracts::weights::WeightInfo for WeightInfo<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(4_330_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(15_641_000_u64)
			// Standard Error: 1_000
			.saturating_add(Weight::from_ref_time(1_222_000_u64).saturating_mul(k as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k as u64)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 1024]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(40_257_000_u64)
			// Standard Error: 5_000
			.saturating_add(Weight::from_ref_time(1_772_000_u64).saturating_mul(q as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(30_422_000_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(55_000_u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(0_u64)
			// Standard Error: 2_000
			.saturating_add(Weight::from_ref_time(91_000_u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:3 w:3)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(355_140_000_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(135_000_u64).saturating_mul(c as u64))
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(2_000_u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(11_u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(266_401_000_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(2_000_u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	fn call() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(224_880_000_u64)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(76_559_000_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(56_000_u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(46_190_000_u64)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:3 w:3)
	fn set_code() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(50_911_000_u64)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(294_173_000_u64)
			// Standard Error: 39_000
			.saturating_add(Weight::from_ref_time(61_089_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(0_u64)
			// Standard Error: 12_484_000
			.saturating_add(Weight::from_ref_time(597_845_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(1_532_524_000_u64)
			// Standard Error: 5_671_000
			.saturating_add(Weight::from_ref_time(318_251_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(296_955_000_u64)
			// Standard Error: 39_000
			.saturating_add(Weight::from_ref_time(69_060_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(365_477_000_u64)
			// Standard Error: 267_000
			.saturating_add(Weight::from_ref_time(29_015_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(399_984_000_u64)
			// Standard Error: 43_000
			.saturating_add(Weight::from_ref_time(159_073_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(844_956_000_u64)
			// Standard Error: 4_039_000
			.saturating_add(Weight::from_ref_time(77_171_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(284_213_000_u64)
			// Standard Error: 11_175_000
			.saturating_add(Weight::from_ref_time(336_425_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(344_787_000_u64)
			// Standard Error: 304_000
			.saturating_add(Weight::from_ref_time(57_103_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(295_508_000_u64)
			// Standard Error: 38_000
			.saturating_add(Weight::from_ref_time(60_308_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(295_589_000_u64)
			// Standard Error: 34_000
			.saturating_add(Weight::from_ref_time(60_084_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(293_930_000_u64)
			// Standard Error: 36_000
			.saturating_add(Weight::from_ref_time(60_440_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(299_711_000_u64)
			// Standard Error: 53_000
			.saturating_add(Weight::from_ref_time(171_668_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(0_u64)
			// Standard Error: 1_888_000
			.saturating_add(Weight::from_ref_time(70_995_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(489_558_000_u64)
			// Standard Error: 3_192_000
			.saturating_add(Weight::from_ref_time(107_244_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(468_860_000_u64)
			// Standard Error: 6_000
			.saturating_add(Weight::from_ref_time(12_004_000_u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(287_480_000_u64)
			// Standard Error: 456_000
			.saturating_add(Weight::from_ref_time(1_608_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(290_396_000_u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(223_000_u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(291_082_000_u64)
			// Standard Error: 431_000
			.saturating_add(Weight::from_ref_time(78_397_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(81_376_000_u64)
			// Standard Error: 1_711_000
			.saturating_add(Weight::from_ref_time(559_864_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(327_316_000_u64)
			// Standard Error: 3_275_000
			.saturating_add(Weight::from_ref_time(911_539_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(2_425_069_000_u64)
			// Standard Error: 15_920_000
			.saturating_add(Weight::from_ref_time(207_279_000_u64).saturating_mul(t as u64))
			// Standard Error: 4_372_000
			.saturating_add(Weight::from_ref_time(22_009_000_u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(474_725_000_u64)
			// Standard Error: 872_000
			.saturating_add(Weight::from_ref_time(25_204_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(0_u64)
			// Standard Error: 18_897_000
			.saturating_add(Weight::from_ref_time(1_030_847_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(1_335_782_000_u64)
			// Standard Error: 5_226_000
			.saturating_add(Weight::from_ref_time(14_987_000_u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(56_u64))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(52_u64))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(695_363_000_u64)
			// Standard Error: 1_476_000
			.saturating_add(Weight::from_ref_time(69_164_000_u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(56_u64))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(52_u64))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(277_889_000_u64)
			// Standard Error: 251_000
			.saturating_add(Weight::from_ref_time(554_103_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(666_001_000_u64)
			// Standard Error: 1_664_000
			.saturating_add(Weight::from_ref_time(71_550_000_u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(55_u64))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(51_u64))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(281_244_000_u64)
			// Standard Error: 212_000
			.saturating_add(Weight::from_ref_time(465_757_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(612_778_000_u64)
			// Standard Error: 1_464_000
			.saturating_add(Weight::from_ref_time(146_497_000_u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(55_u64))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(279_929_000_u64)
			// Standard Error: 181_000
			.saturating_add(Weight::from_ref_time(434_102_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(580_015_000_u64)
			// Standard Error: 1_236_000
			.saturating_add(Weight::from_ref_time(63_161_000_u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(55_u64))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(282_158_000_u64)
			// Standard Error: 235_000
			.saturating_add(Weight::from_ref_time(582_938_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(697_468_000_u64)
			// Standard Error: 1_892_000
			.saturating_add(Weight::from_ref_time(154_514_000_u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(56_u64))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(51_u64))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(0_u64)
			// Standard Error: 88_949_000
			.saturating_add(Weight::from_ref_time(5_690_029_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(0_u64)
			// Standard Error: 210_338_000
			.saturating_add(Weight::from_ref_time(21_803_527_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((160_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((160_u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(15_455_397_000_u64)
			// Standard Error: 274_361_000
			.saturating_add(Weight::from_ref_time(23_463_183_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads((158_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes((79_u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(32_277_802_000_u64)
			// Standard Error: 280_000
			.saturating_add(Weight::from_ref_time(1_555_000_u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(171_u64))
			.saturating_add(T::DbWeight::get().reads((81_u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(165_u64))
			.saturating_add(T::DbWeight::get().writes((81_u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(0_u64)
			// Standard Error: 401_546_000
			.saturating_add(Weight::from_ref_time(32_146_190_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((400_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((400_u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(17_031_126_000_u64)
			// Standard Error: 184_503_000
			.saturating_add(Weight::from_ref_time(2_239_556_000_u64).saturating_mul(t as u64))
			// Standard Error: 295_000
			.saturating_add(Weight::from_ref_time(133_497_000_u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(253_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(249_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(293_983_000_u64)
			// Standard Error: 34_000
			.saturating_add(Weight::from_ref_time(60_464_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(1_349_680_000_u64)
			// Standard Error: 517_000
			.saturating_add(Weight::from_ref_time(70_253_000_u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(291_125_000_u64)
			// Standard Error: 37_000
			.saturating_add(Weight::from_ref_time(90_053_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(1_367_835_000_u64)
			// Standard Error: 510_000
			.saturating_add(Weight::from_ref_time(234_990_000_u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(291_272_000_u64)
			// Standard Error: 40_000
			.saturating_add(Weight::from_ref_time(75_207_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(1_261_495_000_u64)
			// Standard Error: 502_000
			.saturating_add(Weight::from_ref_time(114_134_000_u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(289_948_000_u64)
			// Standard Error: 34_000
			.saturating_add(Weight::from_ref_time(72_869_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(1_262_361_000_u64)
			// Standard Error: 503_000
			.saturating_add(Weight::from_ref_time(113_968_000_u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(381_361_000_u64)
			// Standard Error: 1_596_000
			.saturating_add(Weight::from_ref_time(3_486_331_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(308_376_000_u64)
			// Standard Error: 1_714_000
			.saturating_add(Weight::from_ref_time(2_483_898_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(0_u64)
			// Standard Error: 2_122_000
			.saturating_add(Weight::from_ref_time(1_634_965_000_u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads((158_u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes((158_u64).saturating_mul(r as u64)))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(88_662_000_u64)
			// Standard Error: 84_000
			.saturating_add(Weight::from_ref_time(1_449_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(5_852_000_u64)
			// Standard Error: 137_000
			.saturating_add(Weight::from_ref_time(10_651_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(80_054_000_u64)
			// Standard Error: 7_000
			.saturating_add(Weight::from_ref_time(8_388_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(91_884_000_u64)
			// Standard Error: 117_000
			.saturating_add(Weight::from_ref_time(11_506_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(37_887_000_u64)
			// Standard Error: 312_000
			.saturating_add(Weight::from_ref_time(9_501_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(80_078_000_u64)
			// Standard Error: 150_000
			.saturating_add(Weight::from_ref_time(2_879_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(85_433_000_u64)
			// Standard Error: 156_000
			.saturating_add(Weight::from_ref_time(3_353_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(77_449_000_u64)
			// Standard Error: 8_000
			.saturating_add(Weight::from_ref_time(3_234_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(85_202_000_u64)
			// Standard Error: 3_000
			.saturating_add(Weight::from_ref_time(47_000_u64).saturating_mul(e as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(80_634_000_u64)
			// Standard Error: 14_000
			.saturating_add(Weight::from_ref_time(9_260_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(85_680_000_u64)
			// Standard Error: 15_000
			.saturating_add(Weight::from_ref_time(11_657_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(79_501_000_u64)
			// Standard Error: 47_000
			.saturating_add(Weight::from_ref_time(1_296_000_u64).saturating_mul(p as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(129_078_000_u64)
			// Standard Error: 145_000
			.saturating_add(Weight::from_ref_time(1_582_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(80_510_000_u64)
			// Standard Error: 9_000
			.saturating_add(Weight::from_ref_time(1_451_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(68_209_000_u64)
			// Standard Error: 101_000
			.saturating_add(Weight::from_ref_time(2_827_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(160_642_000_u64)
			// Standard Error: 195_000
			.saturating_add(Weight::from_ref_time(1_471_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(63_044_000_u64)
			// Standard Error: 65_000
			.saturating_add(Weight::from_ref_time(8_037_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(123_628_000_u64)
			// Standard Error: 84_000
			.saturating_add(Weight::from_ref_time(675_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(76_967_000_u64)
			// Standard Error: 591_000
			.saturating_add(Weight::from_ref_time(229_782_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(85_513_000_u64)
			// Standard Error: 130_000
			.saturating_add(Weight::from_ref_time(6_500_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(101_347_000_u64)
			// Standard Error: 45_000
			.saturating_add(Weight::from_ref_time(1_529_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(77_186_000_u64)
			// Standard Error: 5_000
			.saturating_add(Weight::from_ref_time(2_180_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(77_472_000_u64)
			// Standard Error: 5_000
			.saturating_add(Weight::from_ref_time(2_203_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(76_838_000_u64)
			// Standard Error: 15_000
			.saturating_add(Weight::from_ref_time(2_251_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(77_669_000_u64)
			// Standard Error: 5_000
			.saturating_add(Weight::from_ref_time(2_161_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(77_375_000_u64)
			// Standard Error: 6_000
			.saturating_add(Weight::from_ref_time(2_178_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(77_302_000_u64)
			// Standard Error: 6_000
			.saturating_add(Weight::from_ref_time(4_904_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(46_331_000_u64)
			// Standard Error: 167_000
			.saturating_add(Weight::from_ref_time(6_930_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(129_591_000_u64)
			// Standard Error: 130_000
			.saturating_add(Weight::from_ref_time(4_023_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(78_198_000_u64)
			// Standard Error: 9_000
			.saturating_add(Weight::from_ref_time(4_847_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(93_231_000_u64)
			// Standard Error: 110_000
			.saturating_add(Weight::from_ref_time(4_757_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(77_573_000_u64)
			// Standard Error: 5_000
			.saturating_add(Weight::from_ref_time(4_868_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(76_888_000_u64)
			// Standard Error: 184_000
			.saturating_add(Weight::from_ref_time(6_111_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(30_313_000_u64)
			// Standard Error: 187_000
			.saturating_add(Weight::from_ref_time(8_072_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(101_605_000_u64)
			// Standard Error: 49_000
			.saturating_add(Weight::from_ref_time(4_298_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(77_361_000_u64)
			// Standard Error: 6_000
			.saturating_add(Weight::from_ref_time(4_873_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(50_838_000_u64)
			// Standard Error: 174_000
			.saturating_add(Weight::from_ref_time(6_831_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(80_444_000_u64)
			// Standard Error: 208_000
			.saturating_add(Weight::from_ref_time(7_596_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(136_704_000_u64)
			// Standard Error: 160_000
			.saturating_add(Weight::from_ref_time(4_274_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(76_879_000_u64)
			// Standard Error: 7_000
			.saturating_add(Weight::from_ref_time(4_965_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(98_158_000_u64)
			// Standard Error: 108_000
			.saturating_add(Weight::from_ref_time(4_677_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(76_966_000_u64)
			// Standard Error: 9_000
			.saturating_add(Weight::from_ref_time(4_962_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(77_834_000_u64)
			// Standard Error: 9_000
			.saturating_add(Weight::from_ref_time(4_970_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(76_815_000_u64)
			// Standard Error: 7_000
			.saturating_add(Weight::from_ref_time(4_884_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(89_230_000_u64)
			// Standard Error: 166_000
			.saturating_add(Weight::from_ref_time(5_414_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(37_857_000_u64)
			// Standard Error: 195_000
			.saturating_add(Weight::from_ref_time(8_944_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(133_789_000_u64)
			// Standard Error: 100_000
			.saturating_add(Weight::from_ref_time(3_697_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(49_154_000_u64)
			// Standard Error: 204_000
			.saturating_add(Weight::from_ref_time(7_538_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(77_213_000_u64)
			// Standard Error: 6_000
			.saturating_add(Weight::from_ref_time(4_902_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(47_777_000_u64)
			// Standard Error: 162_000
			.saturating_add(Weight::from_ref_time(6_806_000_u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(102_595_000_u64)
			// Standard Error: 59_000
			.saturating_add(Weight::from_ref_time(4_228_000_u64).saturating_mul(r as u64))
	}
}
