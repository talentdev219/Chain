/*
 * This file is part of the Nodle Chain distributed at https://github.com/NodleCode/chain
 * Copyright (C) 2020  Nodle International
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//! Autogenerated weights for pallet_nodle_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-07-18, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/nodle-chain
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_nodle_staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/nodle-staking/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_nodle_staking.
pub trait WeightInfo {
    fn set_invulnerables(c: u32) -> Weight;
    fn set_total_validator_per_round(c: u32) -> Weight;
    fn set_staking_limits() -> Weight;
    fn validator_join_pool() -> Weight;
    fn validator_bond_more() -> Weight;
    fn validator_bond_less() -> Weight;
    fn validator_exit_pool() -> Weight;
    fn nominator_nominate() -> Weight;
    fn nominator_denominate() -> Weight;
    fn nominator_bond_more() -> Weight;
    fn nominator_bond_less() -> Weight;
    fn nominator_denominate_all() -> Weight;
    fn nominator_move_nomination() -> Weight;
    fn withdraw_unbonded() -> Weight;
    fn unbond_frozen() -> Weight;
    fn slash_cancel_deferred(s: u32, c: u32) -> Weight;
    fn withdraw_staking_rewards() -> Weight;
}

/// Weights for pallet_nodle_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn set_invulnerables(c: u32) -> Weight {
        (26_373_000 as Weight)
            // Standard Error: 20_000
            .saturating_add((613_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    fn set_total_validator_per_round(_c: u32) -> Weight {
        (28_794_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(5 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    fn set_staking_limits() -> Weight {
        (89_817_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(11 as Weight))
            .saturating_add(T::DbWeight::get().writes(9 as Weight))
    }
    fn validator_join_pool() -> Weight {
        (113_291_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(11 as Weight))
            .saturating_add(T::DbWeight::get().writes(7 as Weight))
    }
    fn validator_bond_more() -> Weight {
        (116_898_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(7 as Weight))
    }
    fn validator_bond_less() -> Weight {
        (70_621_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(9 as Weight))
            .saturating_add(T::DbWeight::get().writes(5 as Weight))
    }
    fn validator_exit_pool() -> Weight {
        (67_345_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(8 as Weight))
            .saturating_add(T::DbWeight::get().writes(5 as Weight))
    }
    fn nominator_nominate() -> Weight {
        (133_108_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(12 as Weight))
            .saturating_add(T::DbWeight::get().writes(7 as Weight))
    }
    fn nominator_denominate() -> Weight {
        (104_645_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    fn nominator_bond_more() -> Weight {
        (116_988_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(7 as Weight))
    }
    fn nominator_bond_less() -> Weight {
        (86_350_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(11 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    fn nominator_denominate_all() -> Weight {
        (1_617_802_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(33 as Weight))
            .saturating_add(T::DbWeight::get().writes(30 as Weight))
    }
    fn nominator_move_nomination() -> Weight {
        (198_290_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(12 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn withdraw_unbonded() -> Weight {
        (45_114_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(6 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    fn unbond_frozen() -> Weight {
        (90_548_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(6 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
    }
    fn slash_cancel_deferred(s: u32, c: u32) -> Weight {
        (16_776_905_000 as Weight)
            // Standard Error: 13_000
            .saturating_add((54_000 as Weight).saturating_mul(s as Weight))
            // Standard Error: 13_000
            .saturating_add((65_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn withdraw_staking_rewards() -> Weight {
        (148_049_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(5 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn set_invulnerables(c: u32) -> Weight {
        (26_373_000 as Weight)
            // Standard Error: 20_000
            .saturating_add((613_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(4 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
    }
    fn set_total_validator_per_round(_c: u32) -> Weight {
        (28_794_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(5 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
    }
    fn set_staking_limits() -> Weight {
        (89_817_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(11 as Weight))
            .saturating_add(RocksDbWeight::get().writes(9 as Weight))
    }
    fn validator_join_pool() -> Weight {
        (113_291_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(11 as Weight))
            .saturating_add(RocksDbWeight::get().writes(7 as Weight))
    }
    fn validator_bond_more() -> Weight {
        (116_898_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(7 as Weight))
    }
    fn validator_bond_less() -> Weight {
        (70_621_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(9 as Weight))
            .saturating_add(RocksDbWeight::get().writes(5 as Weight))
    }
    fn validator_exit_pool() -> Weight {
        (67_345_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(8 as Weight))
            .saturating_add(RocksDbWeight::get().writes(5 as Weight))
    }
    fn nominator_nominate() -> Weight {
        (133_108_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(12 as Weight))
            .saturating_add(RocksDbWeight::get().writes(7 as Weight))
    }
    fn nominator_denominate() -> Weight {
        (104_645_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(6 as Weight))
    }
    fn nominator_bond_more() -> Weight {
        (116_988_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(7 as Weight))
    }
    fn nominator_bond_less() -> Weight {
        (86_350_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(11 as Weight))
            .saturating_add(RocksDbWeight::get().writes(6 as Weight))
    }
    fn nominator_denominate_all() -> Weight {
        (1_617_802_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(33 as Weight))
            .saturating_add(RocksDbWeight::get().writes(30 as Weight))
    }
    fn nominator_move_nomination() -> Weight {
        (198_290_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(12 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn withdraw_unbonded() -> Weight {
        (45_114_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(6 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
    }
    fn unbond_frozen() -> Weight {
        (90_548_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(6 as Weight))
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
    }
    fn slash_cancel_deferred(s: u32, c: u32) -> Weight {
        (16_776_905_000 as Weight)
            // Standard Error: 13_000
            .saturating_add((54_000 as Weight).saturating_mul(s as Weight))
            // Standard Error: 13_000
            .saturating_add((65_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
    }
    fn withdraw_staking_rewards() -> Weight {
        (148_049_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(5 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
    }
}
