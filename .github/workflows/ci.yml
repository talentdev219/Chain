name: Test rust code

on:
  push:
    branches:
      - master
  pull_request:

env:
  nightly: nightly-2022-09-20
  target: wasm32-unknown-unknown
  tarpaulin-vers: "0.20.0"
  try-runtime-chain: dev
  try-runtime-uri: wss://eden-rpc.dwellir.com:443

jobs:
  clippy_lint:
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          target: ${{ env.target }}
          components: clippy
      - name: Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features -- -A clippy::type_complexity -A clippy::identity_op -A clippy::boxed_local -D dead_code
          toolchain: ${{ env.nightly }}
  rustfmt:
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          components: rustfmt
      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1

  tests:
    runs-on: ubuntu-latest-16-cores

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          target: ${{ env.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-

      - name: Build
        run: cargo build --release --bin nodle-parachain

      - name: Unit tests
        run: cargo test --all-features

      - name: Compare metadata
        run: |
          target/release/nodle-parachain --ws-external --ws-port=9944 --dev -- --dev &
          docker run --net=host jacogr/polkadot-js-tools metadata ${{ env.try-runtime-uri }} ws://localhost:9944 > output.txt

      - name: Save output as artifact
        uses: actions/upload-artifact@v3
        with:
          name: metadata-comparison
          path: |
            output.txt

  tarpaulin:
    runs-on: ubuntu-latest-16-cores
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          target: ${{ env.target }}  

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: ${{ env.tarpaulin-vers }}
          args: "--avoid-cfg-tarpaulin --all-features --workspace --timeout 120 --exclude runtimes-eden nodle-parachain --exclude-files **/mock.rs **/weights.rs **/migrations.rs"

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3.0.0
        with:
          fail_ci_if_error: false

  try-runtime:
    runs-on: ubuntu-latest-16-cores
    timeout-minutes: 50
    steps:
      - uses: actions/checkout@v3
      - name: Check Version
        run: |
         echo -n "eden_rev=" >> $GITHUB_OUTPUT
         curl -s --request POST   --url https://nodle-parachain.api.onfinality.io/public   --header 'Content-Type: application/json'   --data '{
             "jsonrpc": "2.0", 
              "method": "system_version",    
              "params": [],
              "id": 1
            }' | jq '{"result"}[]' >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
        id: get_version

      - name: Install Rust nightly
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          target: ${{ env.target }}
      - name: Cache a dir
        uses: actions/cache@v3
        id: cachedir
        with:
          path: snapshots
          key: ${{steps.get_version.outputs.eden_rev}}

      - name: Try runtime update snap
        if: steps.cachedir.outputs.cache-hit != 'true'
        run: |
            install -d snapshots
            date > snapshots/created_at
            cargo run --release --bin nodle-parachain --features=try-runtime try-runtime --execution native --chain ${{ env.try-runtime-chain }} --no-spec-name-check  on-runtime-upgrade  live --snapshot-path="snapshots/paradis-snapshot-full" -u ${{ env.try-runtime-uri}}
      - name: Try runtime reuse snap
        if: steps.cachedir.outputs.cache-hit == 'true'
        run: |
            cat snapshots/created_at
            cargo run --release --bin nodle-parachain --features=try-runtime try-runtime --execution native --chain ${{ env.try-runtime-chain }} --no-spec-name-check  on-runtime-upgrade  snap --snapshot-path="snapshots/paradis-snapshot-full"


