name: Test rust code

on: [push, pull_request]

jobs:

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Cache cargo registry  
      uses: actions/cache@v2.1.6  
      with: 
        path: ~/.cargo/registry 
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index 
      uses: actions/cache@v2.1.6  
      with: 
        path: ~/.cargo/git  
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache cargo build
      uses: actions/cache@v2.1.6
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-

    - name: Install ubuntu native dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt install -y cmake pkg-config libssl-dev git build-essential clang libclang-dev

    - name: Cleanup ubuntu filesystem
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt clean
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Setup toolchain
      run: ./scripts/init.sh

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Cargo check
      run: SKIP_WASM_BUILD= cargo check --all-targets --all-features --workspace

    - name: Generate coverage report
      run: cargo +nightly tarpaulin --verbose --all-features --workspace --timeout 120 --out Xml

    - name: Upload to Codecov
      uses: codecov/codecov-action@v1
      with:
        fail_ci_if_error: true

    # - name: Run tests
    #   run: SKIP_WASM_BUILD= cargo test --all-targets --all-features --workspace

  fmt:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup toolchain
      run: ./scripts/init.sh

    - name: Install rustfmt
      run: rustup component add rustfmt

    - name: Run cargo fmt
      run: cargo fmt --all -- --check